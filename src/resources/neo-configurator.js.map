{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./client/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./client/src/namespace.js","webpack://craft-neo/./client/src/configurator/Item.js","webpack://craft-neo/./client/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./client/src/configurator/BlockType.js","webpack://craft-neo/./client/src/configurator/Settings.js","webpack://craft-neo/./client/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./client/src/configurator/Group.js","webpack://craft-neo/./client/src/configurator/GroupSettings.js","webpack://craft-neo/./client/src/configurator/Configurator.js","webpack://craft-neo/./client/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._settings = settings.settings\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._fieldLayout = settings.fieldLayout\n\n    this.$container = this._generateBlockType(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n    this.$actionsMenu = $neo.filter('[data-neo-bt=\"container.menu\"]')\n\n    this._actionsMenu = new Garnish.MenuBtn(this.$actionsButton)\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n      </div>`)\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  loadFieldLayout () {\n    if (this._fieldLayout) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoadFieldLayout')\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = layout ? { layout } : { layoutId }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.html,\n            id: layoutId,\n            blockTypeId: settings.getId()\n          })\n\n          this.trigger('afterLoadFieldLayout')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.loadFieldLayout()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n  _sortOrder: 0,\n\n  getSortOrder () {\n    return this._sortOrder\n  },\n\n  setSortOrder (sortOrder) {\n    const oldSortOrder = this._sortOrder\n    this._sortOrder = sortOrder | 0\n\n    if (oldSortOrder !== this._sortOrder) {\n      this.trigger('change', {\n        property: 'sortOrder',\n        oldValue: oldSortOrder,\n        newValue: this._sortOrder\n      })\n    }\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: '',\n  js: '',\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._js = settings.js\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this.$container = $(settings.html)\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$sortOrderInput = $neo.filter('[data-neo-bts=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this.setSortOrder(settings.sortOrder)\n    this.setName(settings.name)\n    this.setHandle(settings.handle)\n    this.setDescription(settings.description)\n    this.setEnabled(settings.enabled)\n    this.setIgnorePermissions(settings.ignorePermissions)\n    this.setMinBlocks(settings.minBlocks)\n    this.setMaxBlocks(settings.maxBlocks)\n    this.setMinSiblingBlocks(settings.minSiblingBlocks)\n    this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n    this.setMinChildBlocks(settings.minChildBlocks)\n    this.setMaxChildBlocks(settings.maxChildBlocks)\n    this.setTopLevel(settings.topLevel)\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div>\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $checkbox = this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n      this.$childBlocksContainer.append($checkbox)\n\n      this._refreshChildBlocks()\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlocks()\n    }\n  },\n\n  _refreshChildBlocks () {\n    const blockTypes = Array.from(this._childBlockTypes)\n    const $options = this.$childBlocksContainer.children()\n\n    const getOption = blockType => $options.get(blockTypes.indexOf(blockType))\n\n    this._childBlockTypes = this._childBlockTypes.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())\n    $options.remove()\n\n    for (const blockType of this._childBlockTypes) {\n      const $option = getOption(blockType)\n      this.$childBlocksContainer.append($option)\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n\n      case 'sortOrder':\n        this._refreshChildBlocks()\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n\n    this.$container = this._generateGroup(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n      </div>`)\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n\n    this.$container = this._generateGroupSettings()\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$sortOrderInput = $neo.filter('[data-neo-gs=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setSortOrder(settings.sortOrder)\n    this.setName(settings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  _generateGroupSettings () {\n    NS.enter(this._templateNs)\n    const sortOrderName = NS.fieldName('sortOrder')\n    const nameInputId = NS.value('name', '-')\n    const nameInputName = NS.fieldName('name')\n    const alwaysShowDropdownId = NS.value('alwaysShowDropdown', '-')\n    const alwaysShowDropdownName = NS.fieldName('alwaysShowDropdown')\n    NS.leave()\n    const alwaysShowDropdownOptions = [\n      {\n        value: 'show',\n        label: Craft.t('neo', 'Show')\n      },\n      {\n        value: 'hide',\n        label: Craft.t('neo', 'Hide')\n      },\n      {\n        value: 'global',\n        label: this._defaultAlwaysShowGroupDropdowns ? Craft.t('neo', 'Use global setting (Show)') : Craft.t('neo', 'Use global setting (Hide)')\n      }\n    ]\n    const $nameInput = Craft.ui.createTextField({\n      type: 'text',\n      id: nameInputId,\n      name: nameInputName,\n      label: Craft.t('neo', 'Name'),\n      instructions: Craft.t('neo', 'This can be left blank if you just want an unlabeled separator.'),\n      value: this.getName()\n    })\n    $nameInput.find('input').attr('data-neo-gs', 'input.name')\n\n    return $(`\n      <div>\n      <input type=\"hidden\" name=\"${sortOrderName}\" value=\"${this.getSortOrder()}\" data-neo-gs=\"input.sortOrder\">\n      <div>\n        ${$('<div class=\"field\">').append($nameInput).html()}\n        <div data-neo-gs=\"container.alwaysShowDropdown\">\n          <div class=\"field\">\n            ${Craft.ui.createSelectField({\n              label: Craft.t('neo', 'Always Show Dropdown?'),\n              instructions: Craft.t('neo', 'Whether to show the dropdown for this group if it only has one available block type.'),\n              id: alwaysShowDropdownId,\n              name: alwaysShowDropdownName,\n              options: alwaysShowDropdownOptions,\n              value: this._alwaysShowDropdown ? 'show' : (this._alwaysShowDropdown === false ? 'hide' : 'global')\n            }).html()}\n          </div>\n        </div>\n      </div>\n      <hr>\n      <a class=\"error delete\" data-neo-gs=\"button.delete\">${Craft.t('neo', 'Delete group')}</a>\n    </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypeItemsContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'blockTypes']\n    const gNamespace = [...this._templateNs, 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoadFieldLayout.configurator', () => this.$fieldLayoutContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      blockType.on('afterLoadFieldLayout.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this._addFieldLayout(blockType.getFieldLayout())\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        settings: gSettings\n      })\n\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n      const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n\n      btSettings.setChildBlocks(info.childBlocks)\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    this._insertAt(item.$container, index)\n    this._itemSort.addItems(item.$container)\n\n    if (settings) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n    this._updateItemOrder()\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings) btSettings.addChildBlockType(item)\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n      if (settings) settings.$container.remove()\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._updateItemOrder()\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId, sortOrder) {\n    return this._blockTypeSettingsHtml\n      .replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n      .replace(/__NEOBLOCKTYPE_SORTORDER__/, sortOrder)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        const settings = item.getSettings()\n        if (settings) settings.setSortOrder(index + 1)\n\n        items.push(item)\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'blockTypes']\n    const id = BlockTypeSettings.getNewId()\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSettings().getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settings = new BlockTypeSettings({\n        childBlocks: oldSettings.getChildBlocks(),\n        childBlockTypes: this.getBlockTypes(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel(),\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.loadFieldLayout()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n\n          if (layout.tabs.length > 0) {\n            const data = { layout }\n\n            Craft.queue.push(() => new Promise((resolve, reject) => {\n              Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n                .then(response => {\n                  const fieldLayout = new BlockTypeFieldLayout({\n                    blockTypeId: id,\n                    html: response.data.html,\n                    namespace: [...namespace, id]\n                  })\n\n                  this.$blockTypesContainer.find('.type-spinner').remove()\n                  this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                  resolve()\n                })\n                .catch(reject)\n            }))\n          } else {\n            const fieldLayout = new BlockTypeFieldLayout({\n              blockTypeId: id,\n              html: this._getNewFieldLayoutHtml(),\n              namespace: [...namespace, id]\n            })\n\n            this.$blockTypesContainer.find('.type-spinner').remove()\n            this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n          }\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({ namespace, settings, fieldLayout })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.loadFieldLayout()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      description: data.description,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'groups']\n    const id = GroupSettings.getNewId()\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSettings().getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","_stack","enter","segments","join","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","length","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","_selected","init","assign","_settings","getSettings","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","$container","find","removeAttr","nameInput","name","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","base","settingsObj","_fieldLayout","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","$actionsMenu","_actionsMenu","on","e","addListener","stopPropagation","_updateTemplate","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","Promise","resolve","getFieldLayoutConfig","layoutId","getFieldLayoutId","data","reject","then","response","BlockTypeFieldLayout","catch","text","getTopLevel","$option","option","attr","confirm","destroy","_sortOrder","getSortOrder","setSortOrder","sortOrder","oldSortOrder","property","oldValue","newValue","getFocusElement","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","js","Settings","_childBlockTypes","_initialised","$sortOrderInput","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_js","_settingsChildBlockTypes","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","setName","setHandle","setDescription","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","initUi","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","_handle","oldHandle","getDescription","_description","oldDescription","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_topLevel","lightswitchProp","toggle","getChildBlocks","$all","$options","onAllChange","includes","$checkbox","append","_refreshChildBlocks","allChecked","add","eventNs","removeChildBlockType","splice","off","blockTypes","getOption","sort","b","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","_generateGroupSettings","$alwaysShowDropdownContainer","sortOrderName","nameInputId","nameInputName","alwaysShowDropdownId","alwaysShowDropdownName","alwaysShowDropdownOptions","label","type","instructions","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","$mainContainer","$sidebarContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","$blockTypeItemsContainer","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","settingsHtml","settingsJs","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","_addFieldLayout","gInfo","gSettings","GroupSettings","group","Group","addItem","getBlockTypes","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","_insertAt","addItems","removeItem","showConfirm","message","removeItems","removeListener","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","items","$items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","Date","now","$spinner","setItem","forEach","bt","encodedData","blockTypeHandles","map","cb","insertAt","currentTarget","context","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}
{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./client/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/regex.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/validate.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./client/src/namespace.js","webpack://craft-neo/./client/src/configurator/Item.js","webpack://craft-neo/./client/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./client/src/configurator/BlockType.js","webpack://craft-neo/./client/src/configurator/Settings.js","webpack://craft-neo/./client/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./client/src/configurator/Group.js","webpack://craft-neo/./client/src/configurator/GroupSettings.js","webpack://craft-neo/./client/src/configurator/Configurator.js","webpack://craft-neo/./client/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._settings = settings.settings\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._fieldLayout = settings.fieldLayout\n\n    this.$container = this._generateBlockType(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n    this.$actionsMenu = $neo.filter('[data-neo-bt=\"container.menu\"]')\n\n    this._actionsMenu = new Garnish.MenuBtn(this.$actionsButton)\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n      </div>`)\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  loadFieldLayout () {\n    if (this._fieldLayout) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoadFieldLayout')\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = layout ? { layout } : { layoutId }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.html,\n            id: layoutId,\n            blockTypeId: settings.getId()\n          })\n\n          this.trigger('afterLoadFieldLayout')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.loadFieldLayout()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n  _sortOrder: 0,\n\n  getSortOrder () {\n    return this._sortOrder\n  },\n\n  setSortOrder (sortOrder) {\n    const oldSortOrder = this._sortOrder\n    this._sortOrder = sortOrder | 0\n\n    if (oldSortOrder !== this._sortOrder) {\n      this.trigger('change', {\n        property: 'sortOrder',\n        oldValue: oldSortOrder,\n        newValue: this._sortOrder\n      })\n    }\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: '',\n  js: '',\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._js = settings.js\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this.$container = $(settings.html)\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$sortOrderInput = $neo.filter('[data-neo-bts=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this.setSortOrder(settings.sortOrder)\n    this.setName(settings.name)\n    this.setHandle(settings.handle)\n    this.setDescription(settings.description)\n    this.setMinBlocks(settings.minBlocks)\n    this.setMaxBlocks(settings.maxBlocks)\n    this.setMinSiblingBlocks(settings.minSiblingBlocks)\n    this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n    this.setMinChildBlocks(settings.minChildBlocks)\n    this.setMaxChildBlocks(settings.maxChildBlocks)\n    this.setTopLevel(settings.topLevel)\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this._topLevelLightswitch, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div>\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel },\n  setTopLevel (topLevel) {\n    const oldTopLevel = this._topLevel\n    const newTopLevel = !!topLevel\n\n    if (oldTopLevel !== newTopLevel) {\n      this._topLevel = newTopLevel\n\n      if (this._topLevelLightswitch && this._topLevelLightswitch.on !== this._topLevel) {\n        this._topLevelLightswitch.on = this._topLevel\n        this._topLevelLightswitch.toggle()\n      }\n\n      this.trigger('change', {\n        property: 'topLevel',\n        oldValue: oldTopLevel,\n        newValue: this._topLevel\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $checkbox = this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n      this.$childBlocksContainer.append($checkbox)\n\n      this._refreshChildBlocks()\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlocks()\n    }\n  },\n\n  _refreshChildBlocks () {\n    const blockTypes = Array.from(this._childBlockTypes)\n    const $options = this.$childBlocksContainer.children()\n\n    const getOption = blockType => $options.get(blockTypes.indexOf(blockType))\n\n    this._childBlockTypes = this._childBlockTypes.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())\n    $options.remove()\n\n    for (const blockType of this._childBlockTypes) {\n      const $option = getOption(blockType)\n      this.$childBlocksContainer.append($option)\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    this._refreshSetting(this.$minChildBlocksContainer, !!this.getChildBlocks(), animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, !!this.getChildBlocks(), animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n\n      case 'sortOrder':\n        this._refreshChildBlocks()\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n\n    this.$container = this._generateGroup(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n      </div>`)\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n\n    this.$container = this._generateGroupSettings()\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$sortOrderInput = $neo.filter('[data-neo-gs=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setSortOrder(settings.sortOrder)\n    this.setName(settings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  _generateGroupSettings () {\n    NS.enter(this._templateNs)\n    const sortOrderName = NS.fieldName('sortOrder')\n    const nameInputId = NS.value('name', '-')\n    const nameInputName = NS.fieldName('name')\n    const alwaysShowDropdownId = NS.value('alwaysShowDropdown', '-')\n    const alwaysShowDropdownName = NS.fieldName('alwaysShowDropdown')\n    NS.leave()\n    const alwaysShowDropdownOptions = [\n      {\n        value: 'show',\n        label: Craft.t('neo', 'Show')\n      },\n      {\n        value: 'hide',\n        label: Craft.t('neo', 'Hide')\n      },\n      {\n        value: 'global',\n        label: this._defaultAlwaysShowGroupDropdowns ? Craft.t('neo', 'Use global setting (Show)') : Craft.t('neo', 'Use global setting (Hide)')\n      }\n    ]\n    const $nameInput = Craft.ui.createTextField({\n      type: 'text',\n      id: nameInputId,\n      name: nameInputName,\n      label: Craft.t('neo', 'Name'),\n      instructions: Craft.t('neo', 'This can be left blank if you just want an unlabeled separator.'),\n      value: this.getName()\n    })\n    $nameInput.find('input').attr('data-neo-gs', 'input.name')\n\n    return $(`\n      <div>\n      <input type=\"hidden\" name=\"${sortOrderName}\" value=\"${this.getSortOrder()}\" data-neo-gs=\"input.sortOrder\">\n      <div>\n        ${$('<div class=\"field\">').append($nameInput).html()}\n        <div data-neo-gs=\"container.alwaysShowDropdown\">\n          <div class=\"field\">\n            ${Craft.ui.createSelectField({\n              label: Craft.t('neo', 'Always Show Dropdown?'),\n              instructions: Craft.t('neo', 'Whether to show the dropdown for this group if it only has one available block type.'),\n              id: alwaysShowDropdownId,\n              name: alwaysShowDropdownName,\n              options: alwaysShowDropdownOptions,\n              value: this._alwaysShowDropdown ? 'show' : (this._alwaysShowDropdown === false ? 'hide' : 'global')\n            }).html()}\n          </div>\n        </div>\n      </div>\n      <hr>\n      <a class=\"error delete\" data-neo-gs=\"button.delete\">${Craft.t('neo', 'Delete group')}</a>\n    </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypeItemsContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'blockTypes']\n    const gNamespace = [...this._templateNs, 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoadFieldLayout.configurator', () => this.$fieldLayoutContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      blockType.on('afterLoadFieldLayout.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this._addFieldLayout(blockType.getFieldLayout())\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        settings: gSettings\n      })\n\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n      const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n\n      btSettings.setChildBlocks(info.childBlocks)\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    this._insertAt(item.$container, index)\n    this._itemSort.addItems(item.$container)\n\n    if (settings) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n    this._updateItemOrder()\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings) btSettings.addChildBlockType(item)\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n      if (settings) settings.$container.remove()\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._updateItemOrder()\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId, sortOrder) {\n    return this._blockTypeSettingsHtml\n      .replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n      .replace(/__NEOBLOCKTYPE_SORTORDER__/, sortOrder)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        const settings = item.getSettings()\n        if (settings) settings.setSortOrder(index + 1)\n\n        items.push(item)\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'blockTypes']\n    const id = BlockTypeSettings.getNewId()\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSettings().getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settings = new BlockTypeSettings({\n        childBlocks: oldSettings.getChildBlocks(),\n        childBlockTypes: this.getBlockTypes(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel(),\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.loadFieldLayout()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n\n          if (layout.tabs.length > 0) {\n            const data = { layout }\n\n            Craft.queue.push(() => new Promise((resolve, reject) => {\n              Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n                .then(response => {\n                  const fieldLayout = new BlockTypeFieldLayout({\n                    blockTypeId: id,\n                    html: response.data.html,\n                    namespace: [...namespace, id]\n                  })\n\n                  this.$blockTypesContainer.find('.type-spinner').remove()\n                  this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                  resolve()\n                })\n                .catch(reject)\n            }))\n          } else {\n            const fieldLayout = new BlockTypeFieldLayout({\n              blockTypeId: id,\n              html: this._getNewFieldLayoutHtml(),\n              namespace: [...namespace, id]\n            })\n\n            this.$blockTypesContainer.find('.type-spinner').remove()\n            this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n          }\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({ namespace, settings, fieldLayout })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.loadFieldLayout()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'groups']\n    const id = GroupSettings.getNewId()\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSettings().getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","byteToHex","i","push","toString","substr","arr","offset","arguments","length","undefined","toLowerCase","TypeError","options","buf","rnds","random","_stack","enter","segments","join","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","slice","match","_defaults","settings","_selected","init","assign","_settings","getSettings","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","$container","find","removeAttr","nameInput","name","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","base","settingsObj","_fieldLayout","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","$actionsMenu","_actionsMenu","on","e","addListener","stopPropagation","_updateTemplate","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","Promise","resolve","getFieldLayoutConfig","layoutId","getFieldLayoutId","data","reject","then","response","BlockTypeFieldLayout","catch","text","getTopLevel","$option","option","attr","confirm","destroy","_sortOrder","getSortOrder","setSortOrder","sortOrder","oldSortOrder","property","oldValue","newValue","getFocusElement","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","fieldLayoutId","fieldLayoutConfig","handle","description","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","js","Settings","_childBlockTypes","_initialised","$sortOrderInput","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_js","_settingsChildBlockTypes","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","setName","setHandle","setDescription","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","initUi","_childBlocksSelect","_topLevelLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","_handle","oldHandle","getDescription","_description","oldDescription","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_topLevel","oldTopLevel","newTopLevel","toggle","getChildBlocks","$all","$options","onAllChange","includes","$checkbox","append","_refreshChildBlocks","allChecked","add","eventNs","removeChildBlockType","splice","off","blockTypes","getOption","sort","b","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","_generateGroupSettings","$alwaysShowDropdownContainer","sortOrderName","nameInputId","nameInputName","alwaysShowDropdownId","alwaysShowDropdownName","alwaysShowDropdownOptions","label","type","instructions","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","$mainContainer","$sidebarContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","$blockTypeItemsContainer","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","settingsHtml","settingsJs","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","_addFieldLayout","gInfo","gSettings","GroupSettings","group","Group","addItem","getBlockTypes","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","_insertAt","addItems","removeItem","showConfirm","message","removeItems","removeListener","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","items","$items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","Date","now","$spinner","setItem","forEach","bt","encodedData","blockTypeHandles","map","cb","insertAt","currentTarget","context","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}
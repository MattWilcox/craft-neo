{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._settings = settings.settings\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._fieldLayout = settings.fieldLayout\n\n    this.$container = this._generateBlockType(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n    this.$actionsMenu = $neo.filter('[data-neo-bt=\"container.menu\"]')\n\n    this._actionsMenu = new Garnish.MenuBtn(this.$actionsButton)\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n      </div>`)\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  loadFieldLayout () {\n    if (this._fieldLayout) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoadFieldLayout')\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = layout ? { layout } : { layoutId }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-field-layout', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.html,\n            id: layoutId,\n            blockTypeId: settings.getId()\n          })\n\n          this.trigger('afterLoadFieldLayout')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.loadFieldLayout()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n  _sortOrder: 0,\n\n  getSortOrder () {\n    return this._sortOrder\n  },\n\n  setSortOrder (sortOrder) {\n    const oldSortOrder = this._sortOrder\n    this._sortOrder = sortOrder | 0\n\n    if (oldSortOrder !== this._sortOrder) {\n      this.trigger('change', {\n        property: 'sortOrder',\n        oldValue: oldSortOrder,\n        newValue: this._sortOrder\n      })\n    }\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._afterCreateContainer = () => {\n      this.setSortOrder(settings.sortOrder)\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n    }\n\n    if (settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$sortOrderInput = $neo.filter('[data-neo-bts=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div>\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $checkbox = this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n      this.$childBlocksContainer.append($checkbox)\n\n      this._refreshChildBlocks()\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlocks()\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  _refreshChildBlocks () {\n    const blockTypes = Array.from(this._childBlockTypes)\n    const $options = this.$childBlocksContainer.children()\n\n    const getOption = blockType => $options.get(blockTypes.indexOf(blockType))\n\n    this._childBlockTypes = this._childBlockTypes.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())\n    $options.remove()\n\n    for (const blockType of this._childBlockTypes) {\n      const $option = getOption(blockType)\n      this.$childBlocksContainer.append($option)\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n\n      case 'sortOrder':\n        this._refreshChildBlocks()\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n\n    this.$container = this._generateGroup(settingsObj)\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n      </div>`)\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n\n    this.$container = this._generateGroupSettings()\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$sortOrderInput = $neo.filter('[data-neo-gs=\"input.sortOrder\"]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setSortOrder(settings.sortOrder)\n    this.setName(settings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  _generateGroupSettings () {\n    NS.enter(this._templateNs)\n    const sortOrderName = NS.fieldName('sortOrder')\n    const nameInputId = NS.value('name', '-')\n    const nameInputName = NS.fieldName('name')\n    const alwaysShowDropdownId = NS.value('alwaysShowDropdown', '-')\n    const alwaysShowDropdownName = NS.fieldName('alwaysShowDropdown')\n    NS.leave()\n    const alwaysShowDropdownOptions = [\n      {\n        value: 'show',\n        label: Craft.t('neo', 'Show')\n      },\n      {\n        value: 'hide',\n        label: Craft.t('neo', 'Hide')\n      },\n      {\n        value: 'global',\n        label: this._defaultAlwaysShowGroupDropdowns ? Craft.t('neo', 'Use global setting (Show)') : Craft.t('neo', 'Use global setting (Hide)')\n      }\n    ]\n    const $nameInput = Craft.ui.createTextField({\n      type: 'text',\n      id: nameInputId,\n      name: nameInputName,\n      label: Craft.t('neo', 'Name'),\n      instructions: Craft.t('neo', 'This can be left blank if you just want an unlabeled separator.'),\n      value: this.getName()\n    })\n    $nameInput.find('input').attr('data-neo-gs', 'input.name')\n\n    return $(`\n      <div>\n      <input type=\"hidden\" name=\"${sortOrderName}\" value=\"${this.getSortOrder()}\" data-neo-gs=\"input.sortOrder\">\n      <div>\n        ${$('<div class=\"field\">').append($nameInput).html()}\n        <div data-neo-gs=\"container.alwaysShowDropdown\">\n          <div class=\"field\">\n            ${Craft.ui.createSelectField({\n              label: Craft.t('neo', 'Always Show Dropdown?'),\n              instructions: Craft.t('neo', 'Whether to show the dropdown for this group if it only has one available block type.'),\n              id: alwaysShowDropdownId,\n              name: alwaysShowDropdownName,\n              options: alwaysShowDropdownOptions,\n              value: this._alwaysShowDropdown ? 'show' : (this._alwaysShowDropdown === false ? 'hide' : 'global')\n            }).html()}\n          </div>\n        </div>\n      </div>\n      <hr>\n      <a class=\"error delete\" data-neo-gs=\"button.delete\">${Craft.t('neo', 'Delete group')}</a>\n    </div>`)\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  setSortOrder (sortOrder) {\n    this.base(sortOrder)\n\n    this.$sortOrderInput.val(this.getSortOrder())\n  },\n\n  getName () { return this._name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypeItemsContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'blockTypes']\n    const gNamespace = [...this._templateNs, 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoadFieldLayout.configurator', () => this.$fieldLayoutContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      blockType.on('afterLoadFieldLayout.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this._addFieldLayout(blockType.getFieldLayout())\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        settings: gSettings\n      })\n\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSettings().getSortOrder() - b.getSettings().getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n      const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n\n      btSettings.setChildBlocks(info.childBlocks)\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    this._insertAt(item.$container, index)\n    this._itemSort.addItems(item.$container)\n\n    if (settings) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n    this._updateItemOrder()\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings) btSettings.addChildBlockType(item)\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n      if (settings) settings.$container.remove()\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._updateItemOrder()\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId, sortOrder) {\n    return this._blockTypeSettingsHtml\n      .replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n      .replace(/__NEOBLOCKTYPE_SORTORDER__/, sortOrder)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        const settings = item.getSettings()\n        if (settings) settings.setSortOrder(index + 1)\n\n        items.push(item)\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'blockTypes']\n    const id = BlockTypeSettings.getNewId()\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSettings().getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id, selectedIndex),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.loadFieldLayout()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({ namespace, settings, fieldLayout })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.loadFieldLayout()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'groups']\n    const id = GroupSettings.getNewId()\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSettings().getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","_selected","init","assign","_settings","getSettings","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","$container","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","base","settingsObj","_fieldLayout","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","$actionsMenu","_actionsMenu","on","e","addListener","stopPropagation","_updateTemplate","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","Promise","resolve","getFieldLayoutConfig","layoutId","getFieldLayoutId","data","reject","then","response","BlockTypeFieldLayout","catch","_settings$$container","text","getTopLevel","$option","option","attr","confirm","destroy","_sortOrder","getSortOrder","setSortOrder","sortOrder","oldSortOrder","property","oldValue","newValue","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","js","Settings","_childBlockTypes","_initialised","$sortOrderInput","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","createContainer","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$checkbox","append","_refreshChildBlocks","allChecked","add","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","forEach","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","blockTypes","getOption","sort","b","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","_generateGroupSettings","$alwaysShowDropdownContainer","sortOrderName","nameInputId","nameInputName","alwaysShowDropdownId","alwaysShowDropdownName","alwaysShowDropdownOptions","label","type","instructions","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","$mainContainer","$sidebarContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","$blockTypeItemsContainer","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","settingsHtml","settingsJs","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","_addFieldLayout","gInfo","gSettings","GroupSettings","group","Group","addItem","getBlockTypes","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","_insertAt","addItems","removeItem","showConfirm","message","removeItems","removeListener","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","items","$items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","layoutHtml","setItem","bt","encodedData","blockTypeHandles","cb","insertAt","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}